{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n# Ex 5. Seismic Refraction Tomography (SRT) Forward Modeling\n\nThis example demonstrates seismic refraction tomography forward modeling\nfor watershed structure characterization using PyHydroGeophysX.\n\nThe workflow includes:\n1. Converting water content to seismic P-wave velocity using rock physics models\n2. Creating seismic survey geometry along topographic profiles\n3. Forward modeling to generate synthetic travel time data\n4. Seismic tomography inversion to recover velocity structure\n5. Visualization of velocity models and first-arrival picks\n\nSRT is valuable for determining subsurface structure and bedrock interface\ngeometry, which provides important constraints for hydrogeophysical modeling\nand interpretation of ERT data.\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "import os\nimport sys\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport pygimli as pg\nfrom pygimli.physics import ert\nfrom pygimli.physics import TravelTimeManager\nimport pygimli.physics.traveltime as tt\nfrom mpl_toolkits.axes_grid1 import make_axes_locatable\nimport pygimli.meshtools as mt\n\n# Setup package path for development\ntry:\n    # For regular Python scripts\n    current_dir = os.path.dirname(os.path.abspath(__file__))\nexcept NameError:\n    # For Jupyter notebooks\n    current_dir = os.getcwd()\n\n# Add the parent directory to Python path\nparent_dir = os.path.dirname(current_dir)\nif parent_dir not in sys.path:\n    sys.path.append(parent_dir)\n\n# Import PyHydroGeophysX modules\nfrom PyHydroGeophysX.model_output.modflow_output import MODFLOWWaterContent\nfrom PyHydroGeophysX.core.interpolation import ProfileInterpolator, create_surface_lines\nfrom PyHydroGeophysX.core.mesh_utils import MeshCreator\nfrom PyHydroGeophysX.petrophysics.velocity_models import HertzMindlinModel, DEMModel"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "output_dir = \"C:/Users/HChen8/Documents/GitHub/PyHydroGeophysX/examples/results/seismic_example\"\nos.makedirs(output_dir, exist_ok=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Long seismic profile\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "print(\"Step 1: Follow the workflow to create the mesh and model...\")\n\n# These would be your actual data files\ndata_dir = \"C:/Users/HChen8/Documents/GitHub/PyHydroGeophysX/examples/data/\"\nmodflow_dir = os.path.join(data_dir, \"modflow\")\n\n# Load domain information from files\n# (Replace with your actual file paths)\nidomain = np.loadtxt(os.path.join(data_dir, \"id.txt\"))\ntop = np.loadtxt(os.path.join(data_dir, \"top.txt\"))\nporosity = np.load(os.path.join(data_dir, \"Porosity.npy\"))\n\nWater_Content = np.load(os.path.join(data_dir, \"Watercontent.npy\"))\n\nwater_content = Water_Content[50]\nprint(water_content.shape)\n\n\n# Step 3: Set up profile for 2D section\n\n# Define profile endpoints\npoint1 = [115, 70]  # [col, row]\npoint2 = [95, 180]  # [col, row]\n\n# Initialize profile interpolator\ninterpolator = ProfileInterpolator(\n    point1=point1,\n    point2=point2,\n    surface_data=top,\n    origin_x=569156.2983333333,\n    origin_y=4842444.17,\n    pixel_width=1.0,\n    pixel_height=-1.0,\n    num_points = 400\n)\n\n\n\n# Interpolate water content to profile\nwater_content_profile = interpolator.interpolate_3d_data(water_content)\n\n# Interpolate porosity to profile\nporosity_profile = interpolator.interpolate_3d_data(porosity)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "print(\"Step 2: Creating geometry for the seismic refraction survey...\")\n\n# Load structure layers\nbot = np.load(os.path.join(data_dir, \"bot.npy\"))\n\n# Process layers to get structure\nstructure = interpolator.interpolate_layer_data([top] + bot.tolist())\n\n# Create surface lines\n# Indicate the layer for the structure regolith, fractured bedrock and fresh bedrock\ntop_idx=int(0)\nmid_idx=int(4)\nbot_idx=int(12)\nsurface, line1, line2 = create_surface_lines(\n    L_profile=interpolator.L_profile,\n    structure=structure,\n    top_idx=0,\n    mid_idx=4,\n    bot_idx=12\n)\n\n# Create mesh\nmesh_creator = MeshCreator(quality=32)\nmesh, geom = mesh_creator.create_from_layers(\n    surface=surface,\n    layers=[line1, line2],\n    bottom_depth= np.min(line2[:,1])-10 #50.0\n)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "pg.show(geom)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "numberGeophones = 90\nshotDistance = 5\n\nsensors = np.linspace(1,110, numberGeophones)\n\nscheme = pg.physics.traveltime.createRAData(sensors,shotDistance=shotDistance)\n\n# Adapt sensor positions to slope\npos = np.zeros((numberGeophones,2))\n               \n\nfor i in range(numberGeophones):\n    minusx = np.abs(surface[:,0]-sensors[i])\n    index = np.where(minusx== np.amin(minusx))\n    new_x = surface[index,0]\n    new_y = surface[index,1]\n    pos[i, 0] = new_x\n    pos[i, 1] = new_y\n\n\nscheme.setSensors(pos)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "fig = plt.figure(figsize=[8,6])\n\nax = fig.add_subplot(1,1,1)\npg.show(geom,ax = ax)\npg.viewer.mpl.drawSensors(ax, scheme.sensors(), diam=0.5,\n                         facecolor='black', edgecolor='black')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Step 6: Interpolate data to mesh\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "print(\"Step 6: Interpolating data to mesh...\")\n\nID1 = porosity_profile.copy()\nID1[:mid_idx] = 0 #regolith\nID1[mid_idx:bot_idx] = 3 # fractured bedrock\nID1[bot_idx:] = 2 # fresh bedrock\n\n# Get mesh centers and markers\nmesh_centers = np.array(mesh.cellCenters())\nmesh_markers = np.array(mesh.cellMarkers())\n\n# Interpolate porosity to mesh\nporosity_mesh = interpolator.interpolate_to_mesh(\n    property_values=porosity_profile,\n    depth_values=structure,\n    mesh_x=mesh_centers[:, 0],\n    mesh_y=mesh_centers[:, 1],\n    mesh_markers=mesh_markers,\n    ID=ID1, # Use ID1 to indicate the layers for interpolation\n    layer_markers = [0,3,2],\n\n)\n\n# Interpolate water content to mesh\nwc_mesh = interpolator.interpolate_to_mesh(\n    property_values=water_content_profile,\n    depth_values=structure,\n    mesh_x=mesh_centers[:, 0],\n    mesh_y=mesh_centers[:, 1],\n    mesh_markers=mesh_markers,\n    ID=ID1, # Use ID1 to indicate the layers for interpolation\n    layer_markers = [0,3,2],\n\n)\n\nprint(\"Step 7: Calculating saturation...\")\n\n# Ensure porosity is not zero to avoid division by zero\nporosity_safe = np.maximum(porosity_mesh, 0.01)\nsaturation = np.clip(wc_mesh / porosity_safe, 0.0, 1.0)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "Step 9: Convert to P wave velocity using petrophysical model\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "print(\"Step9: Converting to P wave velocity ..\")\nmarker_labels = [0, 3, 2] # top. mid, bottom layers (example values)\n\n# Initialize velocity models\nhm_model = HertzMindlinModel(critical_porosity=0.4, coordination_number=6.0)\ndem_model = DEMModel()\n\n# Initialize velocity model\nvelocity_mesh = np.zeros_like(wc_mesh)\n\n\n\n\ntop_mask = (mesh_markers == marker_labels[0])\ntop_bulk_modulus = 30.0  # GPa\ntop_shear_modulus = 20.0  # GPa\ntop_mineral_density = 2650  # kg/m\u00b3\ntop_depth = 1.0  # m\n\n# Get Vp values using Hertz-Mindlin model\nVp_high, Vp_low = hm_model.calculate_velocity(\n    porosity=porosity_mesh[top_mask],\n    saturation=saturation[top_mask],\n    bulk_modulus=top_bulk_modulus,\n    shear_modulus=top_shear_modulus,\n    mineral_density=top_mineral_density,\n    depth=top_depth\n)\n\n# Use average of high and low bounds\nvelocity_mesh[top_mask] = (Vp_high + Vp_low) / 2\n\n\n\nmid_mask = (mesh_markers == marker_labels[1])\n\nmid_bulk_modulus = 50.0  # GPa\nmid_shear_modulus = 35.0 # GPa\nmid_mineral_density = 2670  # kg/m\u00b3\nmid_aspect_ratio = 0.05\n\n# Get Vp values using DEM model\n_, _, Vp = dem_model.calculate_velocity(\n    porosity=porosity_mesh[mid_mask],\n    saturation=saturation[mid_mask],\n    bulk_modulus=mid_bulk_modulus,\n    shear_modulus=mid_shear_modulus,\n    mineral_density=mid_mineral_density,\n    aspect_ratio=mid_aspect_ratio\n)\n\nvelocity_mesh[mid_mask] = Vp\n\nbot_mask = (mesh_markers == marker_labels[2])\nbot_bulk_modulus = 55  # GPa\nbot_shear_modulus = 50  # GPa\nbot_mineral_density = 2680  # kg/m\u00b3\nbot_aspect_ratio = 0.03\n\n# Get Vp values using DEM model\n_, _, Vp = dem_model.calculate_velocity(\n    porosity=porosity_mesh[bot_mask],\n    saturation=saturation[bot_mask],\n    bulk_modulus=bot_bulk_modulus,\n    shear_modulus=bot_shear_modulus,\n    mineral_density=bot_mineral_density,\n    aspect_ratio=bot_aspect_ratio\n)\n\nvelocity_mesh[bot_mask] = Vp"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "mgr = TravelTimeManager()\ndatasrt = mgr.simulate(slowness=1.0 / velocity_mesh, scheme=scheme, mesh=mesh,\n                    noiseLevel=0.05, noiseAbs=0.00001, seed=1334\n                    ,verbose=True)\ndatasrt.save(os.path.join(output_dir, \"synthetic_seismic_data_long.dat\"))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "def drawFirstPicks(ax, data, tt=None, plotva=False, **kwargs):\n    \"\"\"Plot first arrivals as lines.\n    \n    Parameters\n    ----------\n    ax : matplotlib.axes\n        axis to draw the lines in\n    data : :gimliapi:`GIMLI::DataContainer`\n        data containing shots (\"s\"), geophones (\"g\") and traveltimes (\"t\")\n    tt : array, optional\n        traveltimes to use instead of data(\"t\")\n    plotva : bool, optional\n        plot apparent velocity instead of traveltimes\n    \n    Return\n    ------\n    ax : matplotlib.axes\n        the modified axis\n    \"\"\"\n    # Extract coordinates\n    px = pg.x(data)\n    gx = np.array([px[int(g)] for g in data(\"g\")])\n    sx = np.array([px[int(s)] for s in data(\"s\")])\n    \n    # Get traveltimes\n    if tt is None:\n        tt = np.array(data(\"t\"))\n    if plotva:\n        tt = np.absolute(gx - sx) / tt\n    \n    # Find unique source positions    \n    uns = np.unique(sx)\n    \n    # Override kwargs with clean, minimalist style\n    kwargs['color'] = 'black'\n    kwargs['linestyle'] = '--'\n    kwargs['linewidth'] = 0.9\n    kwargs['marker'] = None  # No markers on the lines\n    \n    # Plot for each source\n    for i, si in enumerate(uns):\n        ti = tt[sx == si]\n        gi = gx[sx == si]\n        ii = gi.argsort()\n        \n        # Plot line\n        ax.plot(gi[ii], ti[ii], **kwargs)\n        \n        # Add source marker as black square at top\n        ax.plot(si, 0.0, 's', color='black', markersize=4, \n                markeredgecolor='black', markeredgewidth=0.5)\n    \n    # Clean grid style\n    ax.grid(True, linestyle='-', linewidth=0.2, color='lightgray')\n    \n    # Set proper axis labels with units\n    if plotva:\n        ax.set_ylabel(\"Apparent velocity (m s$^{-1}$)\")\n    else:\n        ax.set_ylabel(\"Traveltime (s)\")\n    \n    ax.set_xlabel(\"Distance (m)\")\n    \n\n    \n\n    \n    # Invert y-axis for traveltimes\n    ax.invert_yaxis()\n\n    return ax\n\n# Usage\nfig, ax = plt.subplots(figsize=(3.5, 2.5), dpi=300) \ndrawFirstPicks(ax, datasrt)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "TT = pg.physics.traveltime.TravelTimeManager()\nmesh_inv = TT.createMesh(datasrt, paraMaxCellSize=2, quality=32, paraDepth = 50.0)\nTT.invert(datasrt, mesh = mesh_inv,lam=50,\n          zWeight=0.2,vTop=500, vBottom=5500,\n          verbose=1, limits=[300., 8000.])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "cov = TT.standardizedCoverage()\npos = np.array(mesh_inv.cellCenters())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "import numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy import ndimage\nfrom scipy.interpolate import griddata\n\ndef fill_holes_2d(pos, cov, grid_resolution=100):\n    \"\"\"\n    Fill holes (0 values) surrounded by 1 values in 2D scattered data.\n    \n    Parameters:\n    -----------\n    pos : ndarray of shape (n, 3)\n        Position array where first two columns are x,y coordinates\n    cov : ndarray of shape (n,)\n        Coverage values at each point (0 or 1)\n    grid_resolution : int\n        Resolution of the grid for interpolation\n        \n    Returns:\n    --------\n    filled_cov : ndarray of shape (n,)\n        Updated coverage values with holes filled\n    \"\"\"\n    # Extract only the first two columns (x, y) from pos\n    pos_2d = pos[:, :2]\n    \n    # Extract min and max coordinates for grid boundaries\n    min_coords = np.min(pos_2d, axis=0)\n    max_coords = np.max(pos_2d, axis=0)\n    \n    # Create a regular 2D grid\n    x = np.linspace(min_coords[0], max_coords[0], grid_resolution)\n    y = np.linspace(min_coords[1], max_coords[1], grid_resolution)\n    X, Y = np.meshgrid(x, y)\n    \n    # Interpolate scattered data to regular grid\n    grid_points = np.vstack([X.ravel(), Y.ravel()]).T\n    grid_cov = griddata(pos_2d, cov, grid_points, method='nearest').reshape(X.shape)\n    \n    # Convert to binary\n    binary_grid = (grid_cov > 0.5)\n    \n    # Fill holes using binary_fill_holes from scipy\n    filled_grid = ndimage.binary_fill_holes(binary_grid)\n    \n    # Convert back to original data type\n    filled_grid = filled_grid.astype(float)\n    \n    # Interpolate back to original scattered points\n    filled_cov = griddata(grid_points, filled_grid.ravel(), pos_2d, method='nearest')\n    \n    return filled_cov\n\n# Example usage\n# Assuming you have your data loaded as pos and cov\n# cov = np.array([0, 1, 0, ...])  # Your original coverage values\n\n# Apply the hole filling function\nfilled_cov = fill_holes_2d(pos, cov)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "def createTriangles(mesh):\n    \"\"\"Generate triangle objects for later drawing.\n\n    Creates triangle for each 2D triangle cell or 3D boundary.\n    Quads will be split into two triangles. Result will be cached into mesh._triData.\n\n    Parameters\n    ----------\n    mesh : :gimliapi:`GIMLI::Mesh`\n        2D mesh or 3D mesh\n\n    Returns\n    -------\n    x : numpy array\n        x position of nodes\n    y : numpy array\n        x position of nodes\n    triangles : numpy array Cx3\n        cell indices for each triangle, quad or boundary face\n    z : numpy array\n        z position for given indices\n    dataIdx : list of int\n        List of indices for a data array\n    \"\"\"\n    if hasattr(mesh, '_triData'):\n        if hash(mesh) == mesh._triData[0]:\n            return mesh._triData[1:]\n\n    x = pg.x(mesh)\n    y = pg.y(mesh)\n    z = pg.z(mesh)\n    #    x.round(1e-1)\n    #    y.round(1e-1)\n\n    if mesh.dim() == 2:\n        ents = mesh.cells()\n    else:\n        ents = mesh.boundaries(mesh.boundaryMarkers() != 0)\n        if len(ents) == 0:\n            for b in mesh.boundaries():\n                if b.leftCell() is None or b.rightCell() is None:\n                    ents.append(b)\n\n    triangles = []\n    dataIdx = []\n\n    for c in ents:\n        triangles.append([c.node(0).id(), c.node(1).id(), c.node(2).id()])\n        dataIdx.append(c.id())\n\n        if c.shape().nodeCount() == 4:\n            triangles.append([c.node(0).id(), c.node(2).id(), c.node(3).id()])\n            dataIdx.append(c.id())\n\n    mesh._triData = [hash(mesh), x, y, triangles, z, dataIdx]\n\n    return x, y, triangles, z, dataIdx"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "x, y, triangles, _, dataIndex = createTriangles(mesh_inv)\nz = pg.meshtools.cellDataToNodeData(mesh_inv,TT.model.array())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "params = {'legend.fontsize': 15,\n          #'figure.figsize': (15, 5),\n         'axes.labelsize': 15,\n         'axes.titlesize':16,\n         'xtick.labelsize':15,\n         'ytick.labelsize':15}\nimport matplotlib.pylab as pylab\npylab.rcParams.update(params)\n\nplt.rcParams[\"font.family\"] = \"Arial\"\n\nfrom palettable.lightbartlein.diverging import BlueDarkRed18_18\nfixed_cmap = BlueDarkRed18_18.mpl_colormap\n\nfig = plt.figure(figsize=[8,9])\nax1 = fig.add_subplot(1,1,1)\npg.show(mesh_inv,TT.model.array(),cMap=fixed_cmap,coverage = filled_cov,ax = ax1,label='Velocity (m s$^{-1}$)',\n        xlabel=\"Distance (m)\", ylabel=\"Elevation (m)\",pad=0.3,cMin =500, cMax=5000\n       ,orientation=\"vertical\")\n\n\nax1.tricontour(x, y, triangles, z, levels=[1200], linewidths=1.0, colors='k', linestyles='dashed')\nax1.tricontour(x, y, triangles, z, levels=[4300], linewidths=1.0, colors='k', linestyles='-')\n\n\npg.viewer.mpl.drawSensors(ax1, datasrt.sensors(), diam=0.9,\n                         facecolor='black', edgecolor='black')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Short seismic profiles\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "ttData = tt.load(\"C:/Users/HChen8/Documents/GitHub/PyHydroGeophysX/examples/results/workflow_example/synthetic_seismic_data.dat\")\nTT_short = pg.physics.traveltime.TravelTimeManager()\nmesh_inv1 = TT_short.createMesh(ttData , paraMaxCellSize=2, quality=32, paraDepth = 30.0)\nTT_short.invert(ttData , mesh = mesh_inv,lam=50,\n          zWeight=0.2,vTop=500, vBottom=5500,\n          verbose=1, limits=[300., 8000.])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "x1, y1, triangles1, _, dataIndex1 = createTriangles(mesh_inv)\nz1 = pg.meshtools.cellDataToNodeData(mesh_inv,np.array(TT_short.model))\npos = np.array(mesh_inv.cellCenters())\nfilled_cov1 = fill_holes_2d(pos, TT_short.standardizedCoverage())"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "params = {'legend.fontsize': 15,\n          #'figure.figsize': (15, 5),\n         'axes.labelsize': 15,\n         'axes.titlesize':16,\n         'xtick.labelsize':15,\n         'ytick.labelsize':15}\nimport matplotlib.pylab as pylab\npylab.rcParams.update(params)\n\nplt.rcParams[\"font.family\"] = \"Arial\"\n\nfrom palettable.lightbartlein.diverging import BlueDarkRed18_18\nfixed_cmap = BlueDarkRed18_18.mpl_colormap\n\nfig = plt.figure(figsize=[8,9])\nax1 = fig.add_subplot(1,1,1)\npg.show(mesh_inv,TT_short.model.array(),cMap=fixed_cmap,coverage = TT_short.standardizedCoverage(),ax = ax1,label='Velocity (m s$^{-1}$)',\n        xlabel=\"Distance (m)\", ylabel=\"Elevation (m)\",pad=0.3,cMin =500, cMax=5000\n       ,orientation=\"vertical\")\n\n\nax1.tricontour(x1, y1, triangles1, z1, levels=[1200], linewidths=1.0, colors='k', linestyles='dashed')\n\n\n\npg.viewer.mpl.drawSensors(ax1, ttData.sensors(), diam=0.8,\n                         facecolor='black', edgecolor='black')"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.11.8"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}

.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples\EX4_TL_inversion.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_EX4_TL_inversion.py>`
        to download the full example code.

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_EX4_TL_inversion.py:


Time-Lapse ERT Inversion Techniques
===================================

This example demonstrates different approaches for time-lapse electrical 
resistivity tomography (ERT) inversion using PyHydroGeophysX.

The example includes:
1. Full time-lapse inversion with temporal regularization
2. Windowed time-lapse inversion for large datasets
3. L1-norm regularized inversion for sharp boundary recovery
4. Comparison of different inversion strategies
5. Visualization of resistivity evolution over time

Time-lapse ERT inversion is crucial for monitoring subsurface water 
content changes and understanding hydrological processes in watersheds.
The temporal regularization helps maintain consistency between consecutive
time steps while allowing for realistic changes.

.. GENERATED FROM PYTHON SOURCE LINES 20-45

.. code-block:: Python

    import os
    import sys
    import numpy as np
    import matplotlib.pyplot as plt
    import pygimli as pg
    from pygimli.physics import ert
    from mpl_toolkits.axes_grid1 import make_axes_locatable

    # Setup package path for development
    try:
        # For regular Python scripts
        current_dir = os.path.dirname(os.path.abspath(__file__))
    except NameError:
        # For Jupyter notebooks
        current_dir = os.getcwd()

    # Add the parent directory to Python path
    parent_dir = os.path.dirname(current_dir)
    if parent_dir not in sys.path:
        sys.path.append(parent_dir)

    # Import PyHydroGeophysX modules
    from PyHydroGeophysX.inversion.time_lapse import TimeLapseERTInversion
    from PyHydroGeophysX.inversion.windowed import WindowedTimeLapseERTInversion


.. GENERATED FROM PYTHON SOURCE LINES 46-67

.. code-block:: Python

    data_dir = "results/TL_measurements/appres"

    # List of ERT data files testing monthly time-lapse inversion
    ert_files = [
        "synthetic_data30.dat",
        "synthetic_data60.dat",
        "synthetic_data90.dat",
        "synthetic_data120.dat",
        "synthetic_data150.dat",
        "synthetic_data180.dat",
        "synthetic_data210.dat",
        "synthetic_data240.dat",
        "synthetic_data270.dat",
        "synthetic_data300.dat",
        "synthetic_data330.dat",
        "synthetic_data360.dat",
    ]





.. GENERATED FROM PYTHON SOURCE LINES 68-69

## 1.Full Time-Lapse Inversion

.. GENERATED FROM PYTHON SOURCE LINES 71-72

#################### FUll Time-Lapse Inversion #####################

.. GENERATED FROM PYTHON SOURCE LINES 72-112

.. code-block:: Python


    # Full paths to data files
    data_files = [os.path.join(data_dir, f) for f in ert_files]

    # Measurement times (can be timestamps or any sequential numbers representing time)
    measurement_times = [1, 2, 3, 4, 5, 6, 7 ,8, 9, 10, 11, 12]  # Adjust based on your actual acquisition times

    # Create a mesh for the inversion (or load an existing one)
    data = ert.load(data_files[0])
    ert_manager = ert.ERTManager(data)
    mesh = ert_manager.createMesh(data=data, quality=34)

    # Set up inversion parameters
    inversion_params = {
        "lambda_val": 50.0,              # Regularization parameter
        "alpha": 10.0,                   # Temporal regularization parameter
        "decay_rate": 0.0,               # Temporal decay rate
        "method": "cgls",                # Solver method ('cgls', 'lsqr', etc.)
        "model_constraints": (0.001, 1e4), # Min/max resistivity values (ohm-m)
        "max_iterations": 15,            # Maximum iterations
        "absoluteUError": 0.0,           # Absolute data error (V)
        "relativeError": 0.05,           # Relative data error (5%)
        "lambda_rate": 1.0,              # Lambda reduction rate
        "lambda_min": 1.0,               # Minimum lambda value
        "inversion_type": "L2"           # 'L1', 'L2', or 'L1L2'
    }

    # Create the time-lapse inversion object
    inversion = TimeLapseERTInversion(
        data_files=data_files,
        measurement_times=measurement_times,
        mesh=mesh,
        **inversion_params
    )

    # Run the inversion
    print("Starting time-lapse inversion...")
    result = inversion.run()
    print("Inversion complete!")


.. GENERATED FROM PYTHON SOURCE LINES 113-125

.. code-block:: Python

    from palettable.lightbartlein.diverging import BlueDarkRed18_18
    fixed_cmap = BlueDarkRed18_18.mpl_colormap

    fig = plt.figure(figsize=[16,6])

    # True resistivity model
    for i in range(12):
        ax = fig.add_subplot(3,4,i+1)
        ax, cbar = pg.show(result.mesh,result.final_models[:,i],pad=0.3,orientation="vertical",cMap=fixed_cmap,cMin= 100,cMax = 3000
                        , ylabel="Elevation (m)",label=' Resistivity ($\Omega$ m)',ax=ax,logScale=False,coverage=result.all_coverage[i]>-1)
        cbar.remove()


.. GENERATED FROM PYTHON SOURCE LINES 126-127

## 2. Window time-lapse inversion

.. GENERATED FROM PYTHON SOURCE LINES 129-130

Measurement times (can be timestamps or any sequential numbers representing time)

.. GENERATED FROM PYTHON SOURCE LINES 130-171

.. code-block:: Python

    measurement_times = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]  # Adjust based on your actual acquisition times

    # Create a mesh for the inversion (or load an existing one)
    data = ert.load(os.path.join(data_dir, ert_files[0]))
    ert_manager = ert.ERTManager(data)
    mesh = ert_manager.createMesh(data=data, quality=34)

    # Set up inversion parameters
    inversion_params = {
        "lambda_val": 10.0,              # Regularization parameter
        "alpha": 10.0,                   # Temporal regularization parameter
        "decay_rate": 0.0,               # Temporal decay rate
        "method": "cgls",                # Solver method ('cgls', 'lsqr', etc.)
        "model_constraints": (0.001, 1e4), # Min/max resistivity values (ohm-m)
        "max_iterations": 15,            # Maximum iterations
        "absoluteUError": 0.0,           # Absolute data error (V)
        "relativeError": 0.05,           # Relative data error (5%)
        "lambda_rate": 1.0,              # Lambda reduction rate
        "lambda_min": 1.0,               # Minimum lambda value
        "inversion_type": "L2"           # 'L1', 'L2', or 'L1L2'
    }

    # Define the window size (number of timesteps to process together)
    window_size = 3  # A window size of 3 means each window includes 3 consecutive measurements

    # Create the windowed time-lapse inversion object
    inversion = WindowedTimeLapseERTInversion(
        data_dir=data_dir,               # Directory containing ERT data files
        ert_files=ert_files,             # List of ERT data filenames
        measurement_times=measurement_times,  # List of measurement times
        window_size=window_size,         # Size of sliding window
        mesh=mesh,                       # Mesh for inversion
        **inversion_params               # Pass the same inversion parameters
    )

    # Run the inversion, optionally in parallel
    print("Starting windowed time-lapse inversion...")
    result = inversion.run()
    print("Inversion complete!")



.. GENERATED FROM PYTHON SOURCE LINES 172-175

.. code-block:: Python

    result.final_models = np.array(result.final_models)
    result.final_models.shape


.. GENERATED FROM PYTHON SOURCE LINES 176-239

.. code-block:: Python

    from palettable.lightbartlein.diverging import BlueDarkRed18_18
    import matplotlib.pyplot as plt
    import numpy as np
    import matplotlib.pylab as pylab
    params = {'legend.fontsize': 13,
              #'figure.figsize': (15, 5),
             'axes.labelsize': 13,
             'axes.titlesize':13,
             'xtick.labelsize':13,
             'ytick.labelsize':13}

    pylab.rcParams.update(params)
    plt.rcParams["font.family"] = "Arial"

    fixed_cmap = BlueDarkRed18_18.mpl_colormap
    fig = plt.figure(figsize=[16, 6])

    # Use tight_layout with adjusted parameters to reduce space
    plt.subplots_adjust(wspace=0.05, hspace=0.05)

    # True resistivity model
    for i in range(12):
        row, col = i // 4, i % 4
        ax = fig.add_subplot(3, 4, i+1)
    
        # Add common ylabel only to leftmost panels
        ylabel = "Elevation (m)" if col == 0 else None
    
        # Add resistivity label only to the middle-right panel (row 1, col 3)
        resistivity_label = ' Resistivity ($\Omega$ m)' if (i == 7) else None
    
        # Only show axis ticks on leftmost and bottom panels
        if col != 0:
            ax.set_yticks([])
    
        if row != 2:  # Not bottom row
            ax.set_xticks([])
        else:
            # Add "distance (m)" label to bottom row panels
            ax.set_xlabel("Distance (m)")
    
        # Create the plot
        ax, cbar = pg.show(result.mesh,
                          result.final_models[:,i],
                          pad=0.3,
                          orientation="vertical",
                          cMap=fixed_cmap,
                          cMin=100,
                          cMax=3000,
                          ylabel=ylabel,
                          label=resistivity_label,
                          ax=ax,
                          logScale=False,
                          coverage=result.all_coverage[i]>-1.2)
    
        # Only keep colorbar for the middle-right panel (row 1, col 3)
        # This corresponds to panel index 7 in a 0-based indexing system
        if i != 7:  # Keep only the colorbar for panel 7
            cbar.remove()

    plt.tight_layout()
    plt.savefig("results/TL_measurements/timelapse_ert.tiff", dpi=300, bbox_inches='tight')


.. GENERATED FROM PYTHON SOURCE LINES 240-241

## 3. Full L1 Time-lapse Inversion

.. GENERATED FROM PYTHON SOURCE LINES 246-249

.. code-block:: Python

    ax, cbar = pg.show(result.mesh,result.final_models[:,i],pad=0.3,orientation="vertical",cMap=fixed_cmap,cMin= 100,cMax = 3000
                        , ylabel="Elevation (m)",label=' Resistivity ($\Omega$ m)',logScale=False,coverage=result.all_coverage[i]>-1)


.. GENERATED FROM PYTHON SOURCE LINES 253-254

Full paths to data files

.. GENERATED FROM PYTHON SOURCE LINES 254-292

.. code-block:: Python

    data_files = [os.path.join(data_dir, f) for f in ert_files]

    # Measurement times (can be timestamps or any sequential numbers representing time)
    measurement_times = [1, 2, 3, 4, 5, 6, 7 ,8, 9, 10, 11, 12]  # Adjust based on your actual acquisition times

    # Create a mesh for the inversion (or load an existing one)
    data = ert.load(data_files[0])
    ert_manager = ert.ERTManager(data)
    mesh = ert_manager.createMesh(data=data, quality=34)

    # Set up inversion parameters
    inversion_params = {
        "lambda_val": 50.0,              # Regularization parameter
        "alpha": 10.0,                   # Temporal regularization parameter
        "decay_rate": 0.0,               # Temporal decay rate
        "method": "cgls",                # Solver method ('cgls', 'lsqr', etc.)
        "model_constraints": (0.001, 1e4), # Min/max resistivity values (ohm-m)
        "max_iterations": 15,            # Maximum iterations
        "absoluteUError": 0.0,           # Absolute data error (V)
        "relativeError": 0.05,           # Relative data error (5%)
        "lambda_rate": 1.0,              # Lambda reduction rate
        "lambda_min": 1.0,               # Minimum lambda value
        "inversion_type": "L1"           # 'L1', 'L2', or 'L1L2'
    }

    # Create the time-lapse inversion object
    inversion = TimeLapseERTInversion(
        data_files=data_files,
        measurement_times=measurement_times,
        mesh=mesh,
        **inversion_params
    )

    # Run the inversion
    print("Starting time-lapse inversion...")
    result_L1 = inversion.run()
    print("Inversion complete!")


.. GENERATED FROM PYTHON SOURCE LINES 293-305

.. code-block:: Python

    from palettable.lightbartlein.diverging import BlueDarkRed18_18
    fixed_cmap = BlueDarkRed18_18.mpl_colormap

    fig = plt.figure(figsize=[16,6])

    # True resistivity model
    for i in range(12):
        ax = fig.add_subplot(3,4,i+1)
        ax, cbar = pg.show(result_L1.mesh,result_L1.final_models[:,i],pad=0.3,orientation="vertical",cMap=fixed_cmap,cMin= 100,cMax = 3000
                        , ylabel="Elevation (m)",label=' Resistivity ($\Omega$ m)',ax=ax,logScale=False,coverage=result.all_coverage[i]>-1)
        cbar.remove()



.. _sphx_glr_download_auto_examples_EX4_TL_inversion.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: EX4_TL_inversion.ipynb <EX4_TL_inversion.ipynb>`

    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: EX4_TL_inversion.py <EX4_TL_inversion.py>`

    .. container:: sphx-glr-download sphx-glr-download-zip

      :download:`Download zipped: EX4_TL_inversion.zip <EX4_TL_inversion.zip>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
